Battle_ActionSwitching

Vanilla

def pbEntryHazards(battler)
    battler_side = battler.pbOwnSide
    # Stealth Rock
    if battler_side.effects[PBEffects::StealthRock] && battler.takesIndirectDamage? &&
       GameData::Type.exists?(:ROCK) && !battler.hasActiveItem?(:HEAVYDUTYBOOTS)
      bTypes = battler.pbTypes(true)
      eff = Effectiveness.calculate(:ROCK, *bTypes)
      if !Effectiveness.ineffective?(eff)
        battler.pbReduceHP(battler.totalhp * eff / 8, false)
        pbDisplay(_INTL("Pointed stones dug into {1}!", battler.pbThis))
        battler.pbItemHPHealCheck
      end
    end
    # Spikes
    if battler_side.effects[PBEffects::Spikes] > 0 && battler.takesIndirectDamage? &&
       !battler.airborne? && !battler.hasActiveItem?(:HEAVYDUTYBOOTS)
      spikesDiv = [8, 6, 4][battler_side.effects[PBEffects::Spikes] - 1]
      battler.pbReduceHP(battler.totalhp / spikesDiv, false)
      pbDisplay(_INTL("{1} is hurt by the spikes!", battler.pbThis))
      battler.pbItemHPHealCheck
    end
    # Toxic Spikes
    if battler_side.effects[PBEffects::ToxicSpikes] > 0 && !battler.fainted? && !battler.airborne?
      if battler.pbHasType?(:POISON)
        battler_side.effects[PBEffects::ToxicSpikes] = 0
        pbDisplay(_INTL("{1} absorbed the poison spikes!", battler.pbThis))
      elsif battler.pbCanPoison?(nil, false) && !battler.hasActiveItem?(:HEAVYDUTYBOOTS)
        if battler_side.effects[PBEffects::ToxicSpikes] == 2
          battler.pbPoison(nil, _INTL("{1} was badly poisoned by the poison spikes!", battler.pbThis), true)
        else
          battler.pbPoison(nil, _INTL("{1} was poisoned by the poison spikes!", battler.pbThis))
        end
      end
    end
    # Sticky Web
    if battler_side.effects[PBEffects::StickyWeb] && !battler.fainted? && !battler.airborne? &&
       !battler.hasActiveItem?(:HEAVYDUTYBOOTS)
      pbDisplay(_INTL("{1} was caught in a sticky web!", battler.pbThis))
      if battler.pbCanLowerStatStage?(:SPEED)
        battler.pbLowerStatStage(:SPEED, 1, nil)
        battler.pbItemStatRestoreCheck
      end
    end
  end
  
Super Yellow

def pbEntryHazards(battler)
    battler_side = battler.pbOwnSide
    # Stealth Rock
    #if battler_side.effects[PBEffects::StealthRock] && battler.takesIndirectDamage? &&
       #GameData::Type.exists?(:ROCK) && !battler.hasActiveItem?(:HEAVYDUTYBOOTS)
      #bTypes = battler.pbTypes(true)
      #eff = Effectiveness.calculate(:ROCK, *bTypes)
      #if !Effectiveness.ineffective?(eff)
        #battler.pbReduceHP(battler.totalhp * eff / 8, false)
        #pbDisplay(_INTL("Pointed stones dug into {1}!", battler.pbThis))
        #battler.pbItemHPHealCheck
      #end
    #end
    
    # Stellar Rock (Steel types can now absorb Stealth Rock
    if battler_side.effects[PBEffects::StealthRock] && battler.takesIndirectDamage? &&
       GameData::Type.exists?(:STELLAR) && !battler.hasActiveItem?(:HEAVYDUTYBOOTS)
      bTypes = battler.pbTypes(true)
      eff = Effectiveness.calculate(:STELLAR, *bTypes)
      if battler.pbHasType?(:STEEL)
        battler_side.effects[PBEffects::StealthRock] = false
        pbDisplay(_INTL("{1} crushed the rocks!", battler.pbThis))
      elsif !battler.pbHasType?(:STEEL) && !battler.hasActiveItem?(:HEAVYDUTYBOOTS)
      if battler_side.effects[PBEffects::StealthRock]
        battler.pbReduceHP(battler.totalhp * 1 / 8, false)
        pbDisplay(_INTL("Stellar stones dug into {1}!", battler.pbThis))
       end
      end
    end
    
    # Spikes
    #if battler_side.effects[PBEffects::Spikes] > 0 && battler.takesIndirectDamage? &&
       #!battler.airborne? && !battler.hasActiveItem?(:HEAVYDUTYBOOTS)
      #spikesDiv = [8, 6, 4][battler_side.effects[PBEffects::Spikes] - 1]
      #battler.pbReduceHP(battler.totalhp / spikesDiv, false)
      #pbDisplay(_INTL("{1} is hurt by the spikes!", battler.pbThis))
      #battler.pbItemHPHealCheck
    #end
    
    # Spikes (Bug types can now absorb Spikes)
    if battler_side.effects[PBEffects::Spikes] > 0 && battler.takesIndirectDamage? &&
       !battler.airborne? && !battler.hasActiveItem?(:HEAVYDUTYBOOTS)
       if battler.pbHasType?(:BUG)
         battler_side.effects[PBEffects::Spikes] = 0
         pbDisplay(_INTL("{1} absorbed the spikes!", battler.pbThis))
       elsif !battler.pbHasType?(:BUG) && !battler.hasActiveItem?(:HEAVYDUTYBOOTS)
       spikesDiv = [8, 6, 4][battler_side.effects[PBEffects::Spikes] - 1]
       battler.pbReduceHP(battler.totalhp / spikesDiv, false)
       pbDisplay(_INTL("{1} is hurt by the spikes!", battler.pbThis))
       battler.pbItemHPHealCheck
      end
    end
    
    # Toxic Spikes (Same as Vanilla games)
    if battler_side.effects[PBEffects::ToxicSpikes] > 0 && !battler.fainted? && !battler.airborne?
      if battler.pbHasType?(:POISON)
        battler_side.effects[PBEffects::ToxicSpikes] = 0
        pbDisplay(_INTL("{1} absorbed the poison spikes!", battler.pbThis))
      elsif battler.pbCanPoison?(nil, false) && !battler.hasActiveItem?(:HEAVYDUTYBOOTS)
        if battler_side.effects[PBEffects::ToxicSpikes] == 2
          battler.pbPoison(nil, _INTL("{1} was badly poisoned by the poison spikes!", battler.pbThis), true)
        else
          battler.pbPoison(nil, _INTL("{1} was poisoned by the poison spikes!", battler.pbThis))
        end
      end
    end
    # Sticky Web (Because this is a form of speed control, it's not a good idea for a Fire or Flying type to absorb/break Sticky Web)
    if battler_side.effects[PBEffects::StickyWeb] && !battler.fainted? && !battler.airborne? &&
       !battler.hasActiveItem?(:HEAVYDUTYBOOTS)
      pbDisplay(_INTL("{1} was caught in a sticky web!", battler.pbThis))
      if battler.pbCanLowerStatStage?(:SPEED)
        battler.pbLowerStatStage(:SPEED, 1, nil)
        battler.pbItemStatRestoreCheck
      end
    end
  end

